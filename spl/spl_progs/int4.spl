
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
// find out the system call number
alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currentPCB S2;
currentPCB = READY_LIST + 32 * ((PTBR - 1024) / 8); // that expression after 32 is PID of the current process

if (sysCallNo == 5)  //**write
alias fileDescriptor S3;
alias wordToWrite S9;

// file descriptor is pushed first 

wordToWrite = [physicalSP - 3];
fileDescriptor = [physicalSP - 4];

// **validity check

if (fileDescriptor < 0 || fileDescriptor > 7) then
[physicalSP - 2] = -1;
ireturn;
endif;

// check SWOFT is valid

if ([currentPCB + 15 + fileDescriptor * 2] == -1) then
[physicalSP - 2] = -1;
ireturn;
endif;
alias SWOFTIndex S5;
alias LSEEKPosition S6;
SWOFTIndex = [currentPCB + 15 + fileDescriptor * 2];
LSEEKPosition = [currentPCB + 15 + fileDescriptor * 2 + 1];
alias FATIndex S7;
FATIndex = [FILE_TABLE + SWOFTIndex * 2];

// load basic block to scratchpad

load(1, [FAT + FATIndex * 8 + 2]);

// disk to write o

alias blockNoInBasicBlock S8;
blockNoInBasicBlock = LSEEKPosition / 512;

if ([SCRATCHPAD + blockNoInBasicBlock] == -1) then // allocate a new block


alias DFListIndex S4; 
DFListIndex = 0;
while (DFListIndex < 447) do
if ([FAT + 512 + DFListIndex] == 0) then
break;
endif;
DFListIndex = DFListIndex + 1;
endwhile;
if (DFListIndex == 447) then
[physicalSP - 2] = -1;
ireturn;
endif;

// set 1 disk free list
[FAT + 512 + DFListIndex] = 1;
// add the block to the basic block of the file
[SCRATCHPAD + blockNoInBasicBlock] = DFListIndex;

// store the basic block
store(1, [FAT + FATIndex * 8 + 2]);

// increment size 
[FAT + FATIndex * 8 + 1] = [FAT + FATIndex * 8 + 1] + 512;

store(5, 19); // store the FAT
store(6, 20); // store the Disk Free List
endif;

// block to scratchpad
alias blockToWriteTo S10;
blockToWriteTo = [SCRATCHPAD + blockNoInBasicBlock];
load(1, blockToWriteTo);
// write the argument to disk
[SCRATCHPAD + LSEEKPosition % 512] = wordToWrite;
print wordToWrite;
// store the block back to the disk
store(1, blockToWriteTo);

// increment LSEEK
[currentPCB + 15 + fileDescriptor * 2 + 1] = [currentPCB + 15 + fileDescriptor * 2 + 1] + 1;


[physicalSP - 2] = 0;
ireturn;
endif;
