alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias PID S9;
PID = (PTBR - 1024) / 8;

alias startPTEntry S15;
alias PTEntryCounter S14;
alias swapPageIndex S13;
alias TRUE S12;
TRUE = 1;

if (sysCallNo == 8) then

	alias newPID S2;
	newPID = PID + 1;
	while ((newPID % 32) != PID) do
		if ([READY_LIST + (newPID % 32) * 32 + 1] == 0) then
			break;
		endif;
		newPID = newPID + 1;
	endwhile;

	newPID = newPID % 32;

	if (newPID == PID) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	alias childPTBR S7;
	childPTBR = 1024 + newPID * 8;


	alias counter S4;
	counter = 25;

	alias newStackLocation S3;

	while (counter < 64) do
		if ([MEM_LIST + counter] == 0) then
			newStackLocation = counter;
			[MEM_LIST + counter] = 1;
			break;
		endif;
		counter = counter + 1;
	endwhile;

	if (counter == 64) then
		startPTEntry = childPTBR - 1018;	// 1018 = 1024 - 6

		while (TRUE == 1) do

			PTEntryCounter = (startPTEntry + 2) % 256;

			while (PTEntryCounter != startPTEntry) do

				if (PTEntryCounter % 8 == 6) then
					PTEntryCounter = (PTEntryCounter + 2) % 256;
					continue;
				endif;

				if ([PAGE_TABLE + PTEntryCounter + 1] == "01") then
					if ([MEM_LIST + [PAGE_TABLE + PTEntryCounter]] > 1) then
						PTEntryCounter = PTEntryCounter + 2;
						continue;
					endif;


					swapPageIndex = 448;
					while (swapPageIndex < 512) do
						if ([DISK_LIST + swapPageIndex] == 0) then
							store([PAGE_TABLE + PTEntryCounter], swapPageIndex);

							[DISK_LIST + swapPageIndex] = 1;

							newStackLocation = [PAGE_TABLE + PTEntryCounter];

							[PAGE_TABLE + PTEntryCounter] = swapPageIndex;

							[PAGE_TABLE + PTEntryCounter + 1] = "00";
							break;
						endif;
						swapPageIndex = swapPageIndex + 1;
					endwhile;

					if (swapPageIndex == 512) then

						[physicalSP - 2] = -1;
						ireturn;
					endif;

					if (swapPageIndex != 512) then

						break;
					endif;

				endif;

				if ([PAGE_TABLE + PTEntryCounter + 1] == "11") then

					[PAGE_TABLE + PTEntryCounter + 1] = "01";

				endif;

				PTEntryCounter = (PTEntryCounter + 2) % 256;

			endwhile;

			if (PTEntryCounter != startPTEntry) then
				break;
			endif;

		endwhile;

	endif;

	alias wordIndex S6;	// to copy from one page to another


	wordIndex = 0;
	while (wordIndex < 512) do
		[newStackLocation * 512 + wordIndex] = [[PTBR + 6] * 512 + wordIndex];
		wordIndex = wordIndex + 1;
	endwhile;

	[childPTBR + 6] = newStackLocation;
	[childPTBR + 7] = "01";

	counter = 0;

	while (counter < 3) do

		[childPTBR + counter * 2] = [PTBR + counter * 2];
		[childPTBR + counter * 2 + 1] = [PTBR + counter * 2 + 1];

		if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
			[MEM_LIST + [PTBR + counter * 2]] = [MEM_LIST + [PTBR + counter * 2]] + 1;
		endif;

		if ([PTBR + counter * 2 + 1] == "00" && [PTBR + counter * 2] > 447) then
			[DISK_LIST + [PTBR + counter * 2]] = [DISK_LIST + [PTBR + counter * 2]] + 1;
			store(6, 20);
		endif;

		counter = counter + 1;

	endwhile;

	alias childPCB S10;
	childPCB = READY_LIST + newPID * 32;

	[childPCB] = newPID;

	[childPCB + 2] = BP;
	[childPCB + 3] = SP - 1;
	[childPCB + 4] = [physicalSP];
	[childPCB + 5] = childPTBR;
	[childPCB + 6] = 4;
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	// set the parent PID
	[childPCB + 31] = PID;


	counter = 0;
	while (counter < 8) do
		[childPCB + 15 + counter * 2] = [READY_LIST + PID * 32 + 15 + counter * 2];
		[childPCB + 15 + counter * 2 + 1] = [READY_LIST + PID * 32 + 15 + counter * 2 + 1];
		if ([childPCB + 15 + counter * 2] != -1) then
			[FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] + 1;
		endif;
		counter = counter + 1;
	endwhile;

	[childPCB + 1] = 1;

	[physicalSP - 2] = newPID;
	alias childPhysicalSP S8;
	childPhysicalSP = ([childPTBR + 2 * ((SP - 1) / 512)] * 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;
// breakpoint;
	ireturn;

endif;
