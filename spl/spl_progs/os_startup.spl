load(7, 1);
load(8, 2);

load(23, 17);
load(24, 18);

[READY_LIST + 0] = 0;
PTBR = 1024;
PTLR = 4;

[PTBR + 0] = 21;
[PTBR + 1] = "00";
[PTBR + 2] = 22;
[PTBR + 3] = "00";
[PTBR + 4] = 23;
[PTBR + 5] = "00";
[PTBR + 6] = 25;
[PTBR + 7] = "01";

alias counter S0;
counter = 0;
while ( counter <  128) do
	[FILE_TABLE + counter + 0] = -1;
	[FILE_TABLE + counter + 1] =  0;
	counter = counter + 2;
endwhile;

counter = 0;

while (counter < 16) do

	[READY_LIST + 15 + counter] = -1;
	counter = counter + 2;

endwhile;

SP = 3 * 512;
[25 * 512] = 0;

load(11, 5);
load(12, 6);
load(9, 3);
load(10, 4);
load(13, 7);
load(14, 8);
load(15, 9);
load(16, 10);
load(17, 11);
load(18, 12);
load(19, 13);
load(20, 14);
load(21, 15);
load(22, 16);
load(23, 17);
load(24, 18);

load(5, 19);
load(6, 20);

counter = 0;
while (counter < 26) do

	[MEM_LIST + counter] = 1;
	counter = counter + 1;
endwhile;
while (counter < 64) do

	[MEM_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

counter = 448;
while (counter < 512) do
	[DISK_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

store(6, 20);

alias PPOFTIndex S1;


counter = 0;
while (counter < 32) do

	[READY_LIST + counter * 32 + 1] = 0;
	PPOFTIndex = 0;
	while (PPOFTIndex < 8) do
		[READY_LIST + counter * 32 + 15 + PPOFTIndex * 2] = -1;
		[READY_LIST + counter * 32 + 15 + PPOFTIndex * 2 + 1] = -1;
		PPOFTIndex = PPOFTIndex + 1;
	endwhile;
	counter = counter + 1;
endwhile;


[READY_LIST + 1] = 2;
[READY_LIST + 31] = 0;


ireturn;
